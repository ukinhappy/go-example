package main

import (
	"fmt"
	"github.com/gomodule/redigo/redis"
	"strings"
	"time"
)

// dial dials connections then returns pool.
func dial(addr, pw string) *redis.Pool {
	dialOptions := []redis.DialOption{
		redis.DialConnectTimeout(time.Second),
		redis.DialReadTimeout(time.Second),
		redis.DialWriteTimeout(time.Second),
	}
	if pw != "" {
		dialOptions = append(dialOptions, redis.DialPassword(pw))
	}
	return &redis.Pool{
		Dial: func() (redis.Conn, error) {
			c, err := redis.Dial("tcp", addr, dialOptions...)
			if err != nil {
				return nil, err
			}

			return c, nil
		},
		MaxIdle:     1000,
		MaxActive:   1000,
		IdleTimeout: time.Second * 100,
	}
}

func main() {
	//lua()
	//snowflake()
	//incrlua()
	t1()
}

var str = ``

func t() {

	uids := strings.Split(str, ",")

	d := dial("172.16.1.112:7004", "").Get()
	for i := 0; i < 41; i++ {
		fmt.Println(d.Do("zadd", "im:voice:p:an:u:20201211:45298372", 11607485108, uids[i]))
	}

	d = dial("172.16.1.112:7000", "").Get()
	for i := 0; i < 50; i++ {
		fmt.Println(d.Do("zadd", "im:voice:p:an:u:20201211:45298333", 11607485108, uids[i]))
	}
}

func t1() {
	d := dial("172.16.1.202:6000", "123456.com").Get()
	uids, _ := redis.Strings(d.Do("lrange", "potential_member20201210", 0, -1))
	var allUid []string
	uidmap := make(map[string]bool, 0)
	for _, uid := range uids {
		if uidmap[strings.Split(uid, ",")[0]] {
		continue
		}
		uidmap[strings.Split(uid, ",")[0]] = true
		allUid = append(allUid, strings.Split(uid, ",")[0])
	}

	fmt.Println(strings.Join(allUid, ","))
}
